process {
    withName: FASTP {
        ext.args = [
            "-q ${params.fastp_qualified_quality}",
            "--cut_front",
            "--cut_tail",
            "--cut_mean_quality ${params.fastp_cut_mean_quality}",
            "--length_required ${params.fastp_reads_minlength}",
            "--dedup",
            "--trim_poly_x",
            params.fastp_trim_front1 ? "--trim_front1 ${params.fastp_trim_front1}" : "",
            params.fastp_trim_front2 ? "--trim_front2 ${params.fastp_trim_front2}" : "",
        ].join(' ').trim()
        publishDir = [
            [
                path: { "${params.outdir}/filtering/${meta.id}" },
                mode: params.publish_dir_mode,
                pattern: "*.{html,json}"
            ],
            [
                path: { "${params.outdir}/filtering/${meta.id}" },
                mode: params.publish_dir_mode,
                pattern: "*.fastq.gz",
                enabled: params.save_clipped_reads
            ]
        ]
        ext.prefix = { "${meta.id}" }
        tag = { "${meta.id}" }
    }
    withName: FILTER_LOW_COMPLEXITY {
        publishDir = [
            [
                path: { "${params.outdir}/filtering/low_complexity"},
                mode: params.publish_dir_mode,
                pattern: "*.bed",
                enabled: params.save_lc_filtering_bed
            ],
            [
                path: { "${params.outdir}/filtering/low_complexity"},
                mode: params.publish_dir_mode,
                pattern: "*.log",
                enabled: params.save_lc_filtering_log
            ],
            [
                path: { "${params.outdir}/filtering/low_complexity"},
                mode: params.publish_dir_mode,
                pattern: "*.tsv",
                enabled: params.save_lc_filtering_table
            ]
        ]
        ext.prefix = { "${meta.id}" }
        tag = { "${meta.id}" }
    }

    withName: SUBSET_HIGH_COMPLEXITY {
        publishDir = [
            [
                path: { "${params.outdir}/filtering"},
                mode: params.publish_dir_mode,
                pattern: "*.fastq.gz", 
                enabled: params.save_ont_filtered_lc_reads
            ]
        ]
        ext.prefix = { "${meta.id}" }
        tag = { "${meta.id}" }
    }

    withName: "FILTLONG_PRELIM" {
        ext.args   = "--min_length 100"
        ext.prefix = { "${meta.id}_prelim" }
        tag = { "${meta.id}" }
    }

    withName: "FILTLONG" {
        ext.args   = [
            "--min_length ${params.filtlong_min_length}",
            params.filtlong_max_length ? "--max_length ${params.filtlong_max_length}" : '',
            params.filtlong_target_bases ? "--target_bases ${params.filtlong_target_bases}" : '',
            params.filtlong_keep_percent ? "--keep_percent ${params.filtlong_keep_percent}" : '',
            params.filtlong_min_mean_q ? "--min_mean_q ${params.filtlong_min_mean_q}" : '',
            params.filtlong_min_window_q ? "--min_window_q ${params.filtlong_min_window_q}" : '',
            params.filtlong_trim ? "--trim" : '',
            params.filtlong_split ? "--split ${params.filtlong_split}" : '',
            params.filtlong_length_weight ? "--length_weight ${params.filtlong_length_weight}" : '',
            params.filtlong_mean_q_weight ? "--mean_q_weight ${params.filtlong_mean_q_weight}" : '',
            params.filtlong_window_q_weight ? "--window_q_weight ${params.filtlong_window_q_weight}" : '',
            params.filtlong_window_size ? "--window_size ${params.filtlong_window_size}" : '',
        ].join(' ').trim()
        publishDir = [
            [
                path: { "${params.outdir}/filtering"},
                mode: params.publish_dir_mode,
                pattern: "*.fastq.gz",
                enabled: params.save_ont_filtered_general_reads
            ]
        ]
        ext.prefix = { "${meta.id}.general_filtered" }
        tag = { "${meta.id}" }
    }

    withName: "FASTQC_*" {
        ext.args = '--quiet'
        publishDir = [
            path: { "${params.outdir}/quality_control/fastqc" },
            mode: params.publish_dir_mode,
            pattern: "*.html"
        ]
        ext.prefix = { "${meta.id}" }
        tag = { "${meta.id}" }
    }
    
    withName: NANOPLOT {
        ext.args = '--no_static'
        publishDir = [
            path: { "${params.outdir}/quality_control/nanoplot" },
            mode: params.publish_dir_mode,
            pattern: "*-report.html"
        ]
        ext.prefix = { "${meta.id}_" }
        tag = { "${meta.id}" }
    }

    withName: "MULTIQC" {
        publishDir = [
            path: { "${params.outdir}/quality_control/multiqc" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: "SUBSAMPLE" {
        ext.args = [
            params.autocycler_subsample_count ? "--count ${params.autocycler_subsample_count}" : '',
            params.autocycler_subsample_min_read ? "--min_read ${params.autocycler_subsample_min_read}" : '',
            params.autocycler_subsample_seed ? "--seed ${params.autocycler_subsample_seed}" : ''
        ].join(' ').trim()
        publishDir = [
            [
                path: { "${params.outdir}/autocycler/subsampled_reads"},
                mode: params.publish_dir_mode,
                pattern: "*.fastq",
                enabled: params.save_subsample_reads
            ]
        ]
        ext.prefix = { "${meta.id}" }
        tag = { "${meta.id}" }
    }
}

